{
  "quizTitle": "Basic Graph Algorithms",
  "questions": [
    {
      "id": 1,
      "question": "What is the time complexity of Depth-First Search (DFS) in a graph?",
      "answers": [
        { "text": "O(V + E)", "isCorrect": true },
        { "text": "O(V)", "isCorrect": false },
        { "text": "O(E)", "isCorrect": false },
        { "text": "O(V^2)", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "question": "What is the time complexity of Breadth-First Search (BFS) in a graph?",
      "answers": [
        { "text": "O(V + E)", "isCorrect": true },
        { "text": "O(V)", "isCorrect": false },
        { "text": "O(E)", "isCorrect": false },
        { "text": "O(V^2)", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "question": "Which of the following algorithms is used to find the shortest path in an unweighted graph?",
      "answers": [
        { "text": "Breadth-First Search (BFS)", "isCorrect": true },
        { "text": "Dijkstra's Algorithm", "isCorrect": false },
        { "text": "A* Search", "isCorrect": false },
        { "text": "Bellman-Ford Algorithm", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "question": "Which algorithm is used to find the shortest path in a weighted graph with non-negative edge weights?",
      "answers": [
        { "text": "Dijkstra's Algorithm", "isCorrect": true },
        { "text": "Bellman-Ford Algorithm", "isCorrect": false },
        { "text": "Floyd-Warshall Algorithm", "isCorrect": false },
        { "text": "Breadth-First Search (BFS)", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "question": "What is the main difference between DFS and BFS?",
      "answers": [
        { "text": "DFS uses a stack, BFS uses a queue", "isCorrect": true },
        { "text": "DFS uses a queue, BFS uses a stack", "isCorrect": false },
        { "text": "DFS is for weighted graphs, BFS is for unweighted graphs", "isCorrect": false },
        { "text": "There is no difference", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "question": "What type of graph does Dijkstra's Algorithm work on?",
      "answers": [
        { "text": "Directed and weighted graphs with non-negative edge weights", "isCorrect": true },
        { "text": "Undirected and weighted graphs with negative edge weights", "isCorrect": false },
        { "text": "Undirected and unweighted graphs", "isCorrect": false },
        { "text": "Directed and unweighted graphs", "isCorrect": false }
      ]
    },
    {
      "id": 7,
      "question": "Which algorithm is used to find the Minimum Spanning Tree (MST) of a graph?",
      "answers": [
        { "text": "Kruskal's Algorithm", "isCorrect": true },
        { "text": "Prim's Algorithm", "isCorrect": false },
        { "text": "Dijkstra's Algorithm", "isCorrect": false },
        { "text": "Bellman-Ford Algorithm", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "question": "In which scenario is the Bellman-Ford algorithm preferred over Dijkstra's algorithm?",
      "answers": [
        { "text": "When the graph contains negative edge weights", "isCorrect": true },
        { "text": "When the graph is unweighted", "isCorrect": false },
        { "text": "When the graph is directed", "isCorrect": false },
        { "text": "When the graph is sparse", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "question": "Which algorithm is used to find strongly connected components in a directed graph?",
      "answers": [
        { "text": "Kosaraju's Algorithm", "isCorrect": true },
        { "text": "Kruskal's Algorithm", "isCorrect": false },
        { "text": "Dijkstra's Algorithm", "isCorrect": false },
        { "text": "Prim's Algorithm", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "question": "What is the main goal of the Floyd-Warshall algorithm?",
      "answers": [
        { "text": "To find the shortest paths between all pairs of nodes", "isCorrect": true },
        { "text": "To find the minimum spanning tree", "isCorrect": false },
        { "text": "To find the shortest path from a source node to a destination", "isCorrect": false },
        { "text": "To find strongly connected components", "isCorrect": false }
      ]
    }
  ]
}
